                        ********* Please note that ****************

  # We cannot implememnt the real message service.Therefore messages will print in server console when RMI server calls the SMS service.

  # Here, it is not used MongoDB local database but MongoDB Atlas cloud which is the global cloud database service 
  which allows to host and manage the data in the cloud.Therefore we not need any database scripts or any other data-store documents.
  anyone can access that database. Already data are stored in the MongoDB atlas cloud. 
 
 
 INSTALLATION AND SETUP GUIDELINES

 
 -> clone or download the files

To run the Back-end server (REST API - Implement using nodeJs)

    -> 'ServiceAPI' is the REST API. Open the file in IDE(VS code, Intelj).
    -> run 'npm install' command in the terminal to download the npm modules.
    -> To start the server, in the terminal type and run 'node server'

   ***********************
   In here i used database as MongoDB Atlas cloud. Therefore connect to the database need to have internet connection.
   All database configuration are done in the 'server.js' file. You just need to run the server.js file by giving command
   as 'node server' . Then server is connected to the database.
  
   (If database does not connect, then stop the server( Ctrl + C ) and run agian)

   ***********************

To run the WebClient (implement using React.js)

    -> 'fire-sensor-monitor' is the Webclient. Open the file in IDE(VS code, Intelj).
    -> run 'npm install' command in the terminal to download the npm modules.
    -> To start the webclient, in the terminal type and run 'npm start'


'SensorApp' is implement using java and it is simple client application to simulate the behavior of a Fire sensor.
These application send the fire alarm status to the REST API every 10 seconds.

    -> Open the 'SensorApp' project in netbeans IDE.

    -> Project will give an error because we need to add the json library .jar to the project.
       Because that library is used to read the JSON data. 
       I also attach used json library file (java-json.jar). Then add that .jar file in to the project library.

    -> Inside the SensorApp project there is class called timer(timer.java). Then run the timer class.
    


'FireSensorMonitor' is implement using java. That project include both GUI application(Dekstop client and RMI server). 
GUI is created by using java swing. Used IDE is netbeans.

    ->  Open the 'FireSensorMonitor' project in netbeans IDE.

    ->  Project  will give an error because we need to add the json library .jar to the project.
	Because that library is used to read the JSON data. 
	I also attach used json library file (java-json.jar). Then add that .jar file in to the project library.

    -> You can find the project classes in here (src/DekstopClient).

    -> In here 'FireSensor.java' is the RMI server interface and 'FireSensorServer.java' is the RMI server implementation class.
	Run the 'FireSensorServer.java' class to start the RMI server.

    -> 'SensorListner.java' is the RMI client interface and 'SensorMonitor.java' is the RMI client implementation class.
	Run the 'SensorMonitor.java' class to start the RMI Client.

    -> Run 'UILogin.java' to start the Admin login interface. 
       In here you can first register to the system by giving email and password. Then Login as a Admin by using creditionals.
       ( or you can log by using bellow username and password
	
	 Username : admin@gmail.com
	 password : Admin
       )

    * sometimes, alerts which are shown by the desktop client (when CO2 or smoke level > 5 ), are displayed 
      behind the window (not always). So, please minimize the window and then it can be seen the desktop alerts.
     
    




